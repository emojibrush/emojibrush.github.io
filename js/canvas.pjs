function CanvasState() {
  this.isDrawing = false;
  this.didDraw = false;
  this.firstDraw = true;
}

var state = new CanvasState();

// add a white background layer
var layer = new Layer();
var rectangle = new Path.Rectangle(0, 0, project.view.size);
rectangle.fillColor = 'white';
layer.size = project.view.size;
layer.addChild(rectangle);
paper.project.layers.push(layer);

// 4TH LAYER IS THE DRAWING LAYER
new Layer();

/* For CSS Blur (seems to work perfectly in Chrome) */
var testRect = new Shape.Rectangle(new Point(rect.left, rect.top), new Size(offset.width + 30, offset.height + 15));

/* Paper.js Events */

function onMouseDown() {

  clearTimeout(showPaletteTimer);
  state.isDrawing = true;

  brush.pushHistory();
}

function onMouseDrag(event) {

  // Fix bugs is some browsers
  var tooLeft = event.point.x + 1 <= 0;
  var tooRight = event.point.x - 1 >= paper.project.view.size.width;
  var tooUp = event.point.y + 1 <= 0;
  var tooDown = event.point.y - 1 >= paper.project.view.size.height;
  if (tooLeft || tooRight || tooUp || tooDown) {
    return;
  };

  state.didDraw = true;
  state.firstDraw = false;

  var imageURL = brush.randomImageURL();

  // make sure we don't exceed the max res
  var radius = Math.min(Math.max(Math.abs(event.delta.y), Math.abs(event.delta.x)), brush.MAX_RES_SIZE);

  var raster = new Raster()
  raster.opacity = 0;
  raster.onLoad = function() {
    this.size = new Size(radius, radius);
    this.rotation = Math.random() * 360;
    this.opacity = 1;
  }
  raster.source = imageURL;
  raster.position = event.point;

  brush.hidePalette();
}

function onMouseUp() {
  clearTimeout(showPaletteTimer);
  showPaletteTimer = null;

  setBackgroundBlurredImage()
  setLinkURL();


  setBackgroundBlurredImage()

  if ( ! state.didDraw) {
    brush.popHistory();
  } else {
    brush.renderCanvasWithURL($('#canvas')[0].toDataURL());
    brush.redraw();
    if (brush.undoIdx > 7) {
      brush.flatten();
    }
  }

  state.didDraw = false;
  state.isDrawing = false;
}

var showPaletteTimer;
var initialTimer;

function onMouseMove(event) {
  if (testRect.contains(event.point)) {
    clearTimeout(initialTimer);
    initialTimer = null;
    if ( ! showPaletteTimer) {
      showPaletteTimer = setTimeout(function() {
        brush.showPalette()
      }, 340);
    }
  } else {
    clearTimeout(showPaletteTimer);
    showPaletteTimer = null;
    if ( ! initialTimer && ! intro && ! state.firstDraw) {
      brush.hidePalette()
    }
  }
}
